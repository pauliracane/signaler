
Name: Paul Iracane
Date: 06May2016
Current Module: OS 
Project Name:  signals

	Project Goals:
	The goal was to make a project that prints out all the prime numbers between 0 and X where X is some random arbitrary value. The program was also supposed to accept user input through the use of signals (kill -1/10/12) or command line input.
	
Considerations:
	-Signal Handling
	-Multiple command line Arguments
	-"Sieve of Eratosthenes" algorithm.
	-Storage Space; due in part to above.

	Initial Design:

	The .h files included were:
		stdio.h -- For printing / error checking while program was being built
		unistd.h -- For Sleep, and getopt
		signal.h -- Catching Signals.
		limits.h -- Maintain a constant size (USHRT_MAX)
		stdlib.h -- Calloc;
		getopt.h -- optopt and optarg.

	As for the format, they mostly came in in the order that I thought of them, functionalizing as I went.
	

Data Flow:
	Set defaults
	check command line inputs
		overwrite defaults when applicable.
	Generate Array using defaults
	Walk through array determining prime numbers
	Determine Start Point
	Begin Printing / Accepting Signals.
	Finish Printing
	Free Malloced Array
	Exit.

Communication Protocol: 
	N/A
	
	Potential Pitfalls: 
		Size
		time -- Want 1 prime output in 1 second.  
		Signal handling is new.
		What's valid what's deprecated
		Inf Loop?
		Quitting cleanly?	
	
Test Plan:  
		User Test:
			Check for Negative
			Check for Words instead of numbers
			Check for invalid options
			Check for Value out of range
			Multiple of each signal. 
			Let it run out high
			Let it run out low	
		
		Automated Test: 
			None
		Test Cases: 
<A brief overview of the test cases that you implemented.> 

		-s -8000000000
		-s 8000000000
		Ctrl + C
		Kill -1
		Kill -10
		Kill -12
		-r Why
		-p 509
		Kill -10; Kill -12
		-s 65000
		-r 10
		-r -10

		Expected Result:  
			I just expected this to print a lot of numbers, and reverse / start over / skip a value when told.
Conclusion:
	It all worked.  As far as I can tell at least, before someone else looks at it.

	Potential updates would be move from signal to sigact, change how I'm storing the array from 2-MAX to store from user input end / start instead...Or just end at the end amount, and don't go higher?  The issue with that is that if they do a reverse from the top, down to an end.



